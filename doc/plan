'''     Popular Physics in History     '''
METHODOLOGIES 
========================================================================================================================================================================
1. a git repo, containing some demo scripts and output files. Do check 'em out at https://github.com/arcolife/popular-physics to see how Invenio's API lets us do it. Thanks Marco, for pointing it out.
2. instance to query the results, one of CDS, and other of my local one, running at http://pcuds54.cern.ch/
3. etherpad  http://pcuds54.cern.ch:9001/ so we can discuss our ideas and methodologies in a clean way somewhere.
4. While running  the demo scripts, there is a problem with the connector API in CDS. Even  when i put different search words, it always gives the same default 10  results. And also, one gets temporarily kicked out for repeated search  queries in a row; 
For solving this, either ask for a dump, then map it onto ElasticSearch instance ( http://elasticsearch.com ) for easier and faster communication with indexed & mapped DB; 
OR we can find another way through the documentation
5. There is a Bibclassify module which generates keywords out of a document. Take a look at https://pcuds54.cern.ch/record/91/keywords -> This requires admin access to the records though. (I can do it on  my local instance, but I think generating keywords on CDS instance is  not possible for us, as normal users. Also the current live CDS instance  doesnt even have an option on tabs, for keywords). 
6. Now I was  thinking, that since we can get the keywords in XML format (or parsing a  list/tag-cloud or hack the script to actually give the records in a  python dictionary, since everything represented in browser is actually  coming from python analysis anyways..), so for crowdcrafting we can ask users to filter out the most important  ones (or atleast rank them, so filtering is our work later to avoid  partiality in results)
7. The descriptions of MARC records, that  Xiaoli gave, are helpful in identifying the keys of the records in  results from python scripts. 
8. For making a timeline, what Daniel suggested is a clean way  indeed. Parse XML, convert into CSV, upload to Goodle Spreadsheet, and  connect to timeliner API to visualize (as on, http://timeliner.okfnlabs.org/view/?url=https://docs.google.com/spreadsheet/ccc?key=0Al6mO9_3Hr2PdGZnRjEwUWxOekhreTNNZEFEMWRZbkE#17 )
9. All we'd have to do is make the time line interactive, either  hack the timeliner API, if its an option, or select something other, so  as to just let bubbles appear, with photographs of Physicists in center,  when clicked, it makes use of tree structures (as on http://philogb.github.io/jit/static/v20/Jit/Examples/RGraph/example1.html ) to display the works of those Physicists, and their collaborations with fellow Physicists.
10. The  time-line has to be automatic (insert a JS script maybe? ), because  thats where the fun is, watching the bubbles push each other, depicting  the center of focus for a decade, a year or for all times.
========================================================================================================================================================================
For the visualization we can use the adapted library from OKF or directly the library that the OKF guys use: http://timeline.verite.co/
Regarding the bubbles: my advise is to be careful with this  visualizations, basically because we can show too many bubbles that the  page feels unresponsive and the laptop fans become very noisy :-) I  think we could discuss about possible ways to represent the data in a really meaningful way. In any case, check this beautiful  bubble charts done with D3.JS: 
http://bl.ocks.org/mbostock/4063269
http://bl.ocks.org/mbostock/4062045
http://bl.ocks.org/mbostock/4063550  <- Really interesting regarding your idea of the bubbles ;-)
http://bl.ocks.org/mbostock/4063423
http://mbostock.github.io/d3/talk/20111116/pack-hierarchy.html
http://mbostock.github.io/d3/talk/20111018/cluster.html
http://bost.ocks.org/mike/uberdata/
========================================================================================================================================================================
    
260_c = publication date (yyyy-mm-dd)
65017_a  = subject (from INSPIRE: Astrophysics, Accelerators, Computing, Experiment-HEP, Gravitation and Cosmology, Instrumentation,  Lattice, Math and Math Physics, Theory-Nucl, Other, Phenomenology-HEP,  General Physics, Theory-HEP)
037_c = category (from arXiv: astro-ph, cond-mat, gr-qc, hep-ex, hep-lat, hep-ph, hep-th, math-ph, nlin, nucl-ex, nucl-th, physics, quant-ph)
773_y = journal publication year*
 
*each record could be complete in different levels so if a record doesn’t have 260_c then resort to 773_y, vice-versa. 
 
Other record markup codes can be found here: https://twiki.cern.ch/twiki/bin/view/Inspire/DevelopmentRecordMarkup , we probably won’t need those, though. 
245_a = title
245_b = subtitle
520_a = abstract_text
520_b = expansion of summary note
100_a = author name
100_u = author affiliation
========================================================================================================================================================================
[1] http://invenio-demo.cern.ch/help/hacking/search-engine-api
[2] http://invenio-software.org/wiki/Talk/WebAPIs#a1.1.SearchAPI
[3] <root_dir>/modules/miscutil/lib/invenio_connector.py
========================================================================================================================================================================
All etherpad links:

    http://pcuds54.cern.ch:9001/p/methods

    http://pcuds54.cern.ch:9001/p/pop_phy

Wiki: 
    http://www.citizencyberscience.net/wiki/index.php?title=Popular_Physics_in_History
Repo:
    https://github.com/arcolife/popular-physics
Instances:

    Local - http://pcuds54.cern.ch/

    CDS - http://cds.cern.ch/

    INSPIRE - http://inspirehep.net/

========================================================================================================================================================================
========================================================================================================================================================================
